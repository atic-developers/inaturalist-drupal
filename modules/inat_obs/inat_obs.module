<?php

  /**
   * iNaturalist observations module
   * Copyright 2014 Projecte Ictineo SCCL (www.projecteictineo.com)
   * aGPLv3
   */
/**
 * Implements hook_menu()
 */
function inat_obs_menu() {
  $items = array();

  //$items['inat/observations'] = array(
    //'title' => t(''),
    //'description' => t(''),
    //'page callback' => '',
    //'access arguments' => '',
    //'menu_name' => 'inaturalist'
    //'type' => MENU_NORMAL_ITEM,
  //);
  $project = variable_get('inat_base_project', '');
  if($project == '') {
    $items['inat/projects/%/%'] = array(
      'title' => t('Projects'),
      'description' => t('iNaturalist Observations'),
      'page callback' => 'inat_page_projects',
      'page arguments' => array(2,3),
      //'access arguments' => array('access inaturalist content'),
      'access callback' => TRUE,
      'menu_name' => 'menu-inaturalist',
      'type' => MENU_NORMAL_ITEM,
    );
    $items['inat/projects'] = $items['inat/projects/%/%'];
    $items['inat/projects/%'] = $items['inat/projects/%/%'];

    $items['inat/project/%'] = array(
      'title' => t('Projects'),
     // 'description' => t('iNaturalist Observations'),
      'page callback' => 'inat_projects',
      'page arguments' => array(2),
      //'access arguments' => array('access inaturalist content'),
      'access callback' => TRUE,
      //'menu_name' => 'menu-inaturalist',
      //'type' => MENU_NORMAL_ITEM,
    );
  }

  $items['inat/taxa/%/%'] = array(
    'title' => t('Species'),
    //'description' => t('iNaturalist Species'),
    'page callback' => 'inat_taxa',
    'page arguments' => array(2,3),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    //'menu_name' => 'menu-inaturalist',
    //'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/taxa/%'] = $items['inat/taxa/%/%'];
  $items['inat/taxons/%'] = array(
    'title' => t('Species'),
    'description' => t('iNaturalist Species'),
    'page callback' => 'inat_taxons',
    'page arguments' => array(2),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'menu_name' => 'menu-inaturalist',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/taxons'] = $items['inat/taxons/%'];
  //$items['inat/taxa'] = array(
    //'title' => t('Species'),
    //'description' => t('iNaturalist Species'),
    //'page callback' => 'inat_taxons',
    //'page arguments' => array(2),
    //'access arguments' => array('access inaturalist content'),
    //'access callback' => TRUE,
    //'menu_name' => 'menu-inaturalist',
    //'type' => MENU_NORMAL_ITEM,
  //);
  $items['inat/place/%'] = array(
    'title' => t('Places'),
    //'description' => t('iNaturalist Species'),
    'page callback' => 'inat_place',
    'page arguments' => array(2),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    //'menu_name' => 'menu-inaturalist',
    //'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/places/%'] = array(
    'title' => t('Places'),
    'description' => t('iNaturalist places'),
    'page callback' => 'inat_places',
    'page arguments' => array(2),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'menu_name' => 'menu-inaturalist',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/places'] = $items['inat/places/%'];
 
  $items['inat/user/%'] = array(
    'title' => t('Users'),
    //'description' => t('iNaturalist Species'),
    'page callback' => 'inat_user',
    'page arguments' => array(2),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    //'menu_name' => 'menu-inaturalist',
    //'type' => MENU_NORMAL_ITEM,
  );
 
  $items['inat/observations/%'] = array(
    'title' => t('Observations'),
    'description' => t('iNaturalist Observations'),
    'page callback' => 'inat_page_observations',
    'page arguments' => array('inat_page_observations',2),
    //'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'menu_name' => 'menu-inaturalist',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/observations'] = $items['inat/observations/%'];
  $items['inat/observation/%obs_id'] = array(
    'title' => t('Observation'),
    //'description' => t('iNaturalist Observations'),
    'page callback' => 'inat_page_observation',
    'page arguments' => array(2),
    //'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    //'menu_name' => 'menu-inaturalist',
    //'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/delete/observation/%'] = array(
    'title' => t('Delete observation'),
    //'description' => t('iNaturalist Observations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inat_obs_obs_delete'),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'menu_name' => 'menu-inaturalist',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/update/observation/%'] = array(
    'title' => t('Add observation'),
    //'description' => t('iNaturalist Observations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inat_obs_obs_update',3),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'menu_name' => 'menu-inaturalist',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/add/observation'] = array(
    'title' => t('Add observation'),
    //'description' => t('iNaturalist Observations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inat_obs_obs_add'),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'menu_name' => 'menu-inaturalist',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['inat/add/inat_transect/edit/showonmap/%'] = array(
    'title' => t(''),
    //'description' => t('iNaturalist Observations'),
    'page callback' => array('inat_obs_add_showonmap'),
    'page arguments' => array(5),
    'access arguments' => array('access inaturalist content'),
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output', 
  );
  return $items;
}

/**
 * Implements hook_theme
 */
function inat_obs_theme($existing, $type, $theme, $path) {
  return array( 
    'inat_projects_general' => array(
      'variables' => array('projects' => NULL),
      'template' => 'projects_general',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_taxa' => array(
      'variables' => array('taxa' => NULL),
      'template' => 'taxa',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_taxa_list' => array(
      'variables' => array('taxons' => NULL),
      'template' => 'taxa_list',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_place' => array(
      'variables' => array('place' => NULL),
      'template' => 'place',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_place_list' => array(
      'variables' => array('places' => NULL, 'current_page' => 1),
      'template' => 'place_list',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_user' => array(
      'variables' => array('user' => NULL),
      'template' => 'user',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_project' => array(
      'variables' => array('projects' => NULL),
      'template' => 'project',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_projects_list' => array(
      'variables' => array('projects' => NULL),
      'template' => 'projects_list',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_observations_general' => array(
      'variables' => array('observations' => NULL, 'current_page' => 1, 'base_path' => 'observations'),
      'template' => 'observations_general',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_observation_list' => array(
      'variables' => array('observation' => NULL),
      'template' => 'observation_list',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_observation' => array(
      'variables' => array('observation' => NULL),
      'template' => 'observation',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'inat_map' => array(
      'variables' => array('observations' => NULL, 'context' => 'page'),
      'template' => 'map',
      'path' => drupal_get_path('module', 'inat_obs') . '/theme',
    ),
    'node__inat_transect' => array(
      'render element' => 'content',
      'base hook' => 'node',
      'template' => 'node--inat_transect',
      'path' => drupal_get_path('module','inat_obs') . '/theme',
    )
);
}

/**
 * Implements hook_block_info()
 */
function inat_obs_block_info() {
  $blocks['inat_obs_map'] = array (
    'info' => t('iNaturalist Observations Map'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['inat_obs_list'] = array (
    'info' => t('iNaturalist Observations List'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}
/**
 * Implements hook_block_configure()
 * https://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_configure/7
 */
function inat_obs_block_configure($delta = '') {
  $form = array();
  switch($delta) {
    case 'inat_obs_map':
      $form['inat_obs_block_map_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of observations to display'),
        '#description' => t('Enter a integer value from 1 to 200'),
        '#default_value' => variable_get('inat_obs_block_map_count', '5'),
      );
    break;
    case 'inat_obs_list':
      $form['inat_obs_block_list_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of observations to display'),
        '#description' => t('Enter a integer value from 1 to 200'),
        '#default_value' => variable_get('inat_obs_block_list_count', '5'),
      );
    break;
  }
  return $form;
}
/** 
 * Implements hook_block_save()
 * http://drupalcode.org/project/examples.git/blob/HEAD:/block_example/block_example.module
 */

function inat_obs_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'inat_obs_map':
      variable_set('inat_obs_block_map_count',$edit['inat_obs_block_map_count']);
    break;
    case 'inat_obs_list':
      variable_set('inat_obs_block_list_count',$edit['inat_obs_block_list_count']);
    break;
  }
}
/**
 * Implements hook_block_view()
 * https://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_view/7
 */
function inat_obs_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'inat_obs_map':
      $project_limitation = '';
      $user_limitation = '';
      $project = variable_get('inat_base_project', '');
      if($project != '') {
        $project_limitation = '/project/'.$project;
      }
      $user = variable_get('inat_base_user', '');
      if($user != '') {
        $user_limitation = '/'.$user;
      }
      $verb = 'observations'.$project_limitation.$user_limitation.'.json';
      $query = array('per_page' => variable_get('inat_obs_block_map_count','5'), 'order_by' => 'observed_on', 'page' => '1');
      $options = array('query' => $query, 'https' => FALSE);
      $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
      $options = array('method' => 'GET');
      $result = drupal_http_request($url, $options);
      $json = drupal_json_decode($result->data);
      
      $block['subject'] = t('Last iNaturalist Map');
      $block['content'] = theme('inat_map', array('observations' => $json, 'context' => 'block'));
    break;
    case 'inat_obs_list':
      $project_limitation = '';
      $user_limitation = '';
      $project = variable_get('inat_base_project', '');
      if($project != '') {
        $project_limitation = '/project/'.$project;
      }
      $user = variable_get('inat_base_user', '');
      if($user != '') {
        $user_limitation = '/'.$user;
      }
      $verb = 'observations'.$project_limitation.$user_limitation.'.json';
      $query = array('per_page' => variable_get('inat_obs_block_list_count','5'), 'order_by' => 'observed_on', 'page' => '1');
      $options = array('query' => $query, 'https' => FALSE);
      $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
      $options = array('method' => 'GET');
      $result = drupal_http_request($url, $options);
      $json = drupal_json_decode($result->data);
      
      $block['subject'] = t('Last iNaturalist Observations');
      $block['content'] = theme('inat_observations_general', array('observations' => $json, 'current_page' => '1'));
    break;
  }
  return $block;
}

/**
 * Implements hook_preprocess()
 */
function inat_obs_preprocess_inat_observations_general(&$var) {
  foreach($var['observations'] as $id => $obs) {
    $var['observations'][$id] = theme('inat_observation_list', array('observation' => $obs));
  }
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/observations.css');


}

function inat_obs_preprocess_inat_projects_general(&$var){
  foreach($var['projects'] as $id => $obs) {
    $var['projects'][$id] = theme('inat_projects_list', array('projects' => $obs));
  }
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/projects.css');

}
function inat_obs_preprocess_inat_observation_list(&$var) {
  drupal_add_js('http://malsup.github.com/jquery.cycle2.js',array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js('http://malsup.github.io/jquery.cycle2.tile.js',array('type' => 'external', 'scope' => 'footer'));
}
function inat_obs_preprocess_inat_observation(&$var){
  drupal_add_js('http://malsup.github.com/jquery.cycle2.js',array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js('http://malsup.github.io/jquery.cycle2.tile.js',array('type' => 'external', 'scope' => 'footer'));
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/observation.css');
  drupal_add_css(libraries_get_path('leaflet').'/leaflet.css');
  drupal_add_js(libraries_get_path('leaflet').'/leaflet.js');
}
function inat_obs_preprocess_inat_map(&$var){
  drupal_add_css(libraries_get_path('leaflet').'/leaflet.css');
  drupal_add_js(libraries_get_path('leaflet').'/leaflet.js');
}

function inat_obs_preprocess_inat_place (&$var){
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/places_list.css');
  drupal_add_css(libraries_get_path('leaflet').'/leaflet.css');
  drupal_add_js(libraries_get_path('leaflet').'/leaflet.js');
}  
function inat_obs_preprocess_inat_place_list (&$var){
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/places_list.css');
  drupal_add_css(libraries_get_path('leaflet').'/leaflet.css');
  drupal_add_js(libraries_get_path('leaflet').'/leaflet.js');
}

function inat_obs_preprocess_inat_taxa (&$var){
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/taxa.css');
}
function inat_obs_preprocess_inat_taxa_list (&$var){
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/taxa_list.css');
}
function inat_obs_preprocess_node (&$variables){
  if ($variables['type'] == 'inat_transect') {
    $verb = 'observations.json';
    $query = array('field:transect_id' => variable_get('inat_login_appid', '').'-'.$variables['nid'],'per_page' => '40', 'order_by' => 'observed_on');
    $options = array('query' => $query, 'https' => FALSE);
    $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
    $options = array('method' => 'GET');
    $result = drupal_http_request($url, $options);
    $json_obs = drupal_json_decode($result->data);
    $aux = 0;
    foreach($json_obs as $id => $obs) {
      $variables['observa_maps'][$aux]['lat'] = $obs['latitude'];
      $variables['observa_maps'][$aux]['lon'] = $obs['longitude'];
      if(count($obs['photos']) >= 1) {
        $popup = '<div class="photo"><img src="'.$obs['photos'][0]['small_url'].'" alt="Photo" /> </div> <h2><a href="'.$GLOBALS['base_url'].'/inat/observation/'.$obs['id'].'">'.$obs['species_guess'].'</h2></a>';
        if(array_key_exists('place_guess',$obs)) {
          $popup .= '<div class="place">'.$obs['place_guess'].'</div>';
        }
      } else {
        $popup = '<div class="photo">No photo </div> <h2><a href="'.$GLOBALS['base_url'].'/inat/observation/'.$obs['id'].'">'.$obs['species_guess'].'</h2></a>';
        if(array_key_exists('place_guess', $obs)) {
          $popup .= '<div class="place">'.$obs['place_guess'].'</div>';
        }
      }

      $variables['observa_maps'][$aux]['pop'] = $popup;
      $variables['observations'][$id] = theme('inat_observation_list', array('observation' => $obs));
      $aux++;
    }
    drupal_add_js(array('inat_obs' => array('punts' => $variables['observa_maps'])), 'setting');
    drupal_add_js(drupal_get_path('module','inat_obs') . '/js/transectpunts.js');
    _preprocess_transect($variables); 
  }
}
function _preprocess_transect($variables) {
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/transect.css');
  drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/observations.css');
  drupal_add_js('http://malsup.github.com/jquery.cycle2.js',array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js('http://malsup.github.io/jquery.cycle2.tile.js',array('type' => 'external', 'scope' => 'footer'));
  
}
function inat_obs_preprocess_page($vars) {
    //dsm($vars); //output: nothings that reference the views!
    if($_GET['q'] == 'transects')
    {
       drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/transect_list.css');
    }
}
//function inat_obs_preprocess_page(&$variables){
  //dsm($variables);
  //drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/transect_list.css');
  //}
//}

//function inat_obs_views_pre_render(&$view) {
  //dpm($view);
  //if ($view->name == 'transects') {
    //drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/transect_list.css');
  //}  
//}

//function inat_obs_theme_registry_alter(&$theme_registry) {
  //dsm($theme_registry);
  //$theme_registry['views_view__transects']['preprocess functions'][] = 'inat_obs_preprocess_func';
//}
// now go on and play with your new preprocess function
//function inat_obs_preprocess_func(&$vars) {
    //drupal_add_css(drupal_get_path('module', 'inat_obs') . '/css/transect_list.css');
//}






/**
 * helper functions
 */

/**
 * Willcard processors
 */

function project_id_load($id2) {

  return $id2;
}

function obs_id_load($id) {
  // TODO limit the allowed values
  //if(is_int($id)) {
    //return $id;
  //} else {
    //return '';
  //}
  return $id;
}


/**
 * Hook menu page callbacks to call iNaturalist API
 * http://www.slideshare.net/jkopel/pnwds-api
 * http://www.inaturalist.org/pages/api+reference
 */


function inat_page_projects($featured = TRUE, $page = NULL) {
  //Remove project list limitation because needs loggin
  //$user = variable_get('inat_base_user', '');
  //if($user != '') {
    //$user_limitation = '/user/'.$user;
  //}
  //$verb = 'projects'.$user_limitation.'.json';
  $verb = 'projects.json';
  $query = array();
  if($featured == 'featured') {
    $query = array('featured' => 'true');
  }
  if(is_numeric($page)) {
    $query += array('page' => $page);
  }elseif (is_numeric($page)) {
    $query += array('page' => $featured);
  }
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json = drupal_json_decode($result->data);
  //return var_export($json);
  return  theme('inat_projects_general', array('projects' => $json));
 
}

function inat_projects($id) {
  /** Get the project information **/
  $verb = 'projects/'.$id.'.json';
  $query = array();
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_proj = drupal_json_decode($result->data);

  /** Get observations for the project **/
  $verb = 'observations/project/'.$id.'.json';
  $query = array('per_page' => '40', 'order_by' => 'observed_on');
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_obs = drupal_json_decode($result->data);
  
  return  theme('inat_project', array('projects' => $json_proj)) . theme('inat_observations_general', array('observations' => $json_obs));;
}

function inat_page_observations($page) {
  if($page == NULL) {
    $page = 1;
  }
  $project_limitation = '';
  $user_limitation = '';
  $project = variable_get('inat_base_project', '');
  if($project != '') {
    $project_limitation = '/project/'.$project;
  }
  $user = variable_get('inat_base_user', '');
  if($user != '') {
    $user_limitation = '/'.$user;
  }
  $verb = 'observations'.$project_limitation.$user_limitation.'.json';
  $query = array('per_page' => '40', 'order_by' => 'observed_on', 'page' => $page);
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json = drupal_json_decode($result->data); 
  //return var_export($json);
  return theme('inat_map', array('observations' => $json)) . theme('inat_observations_general', array('observations' => $json, 'current_page' => $page));
}
function inat_page_observation($id) {
  $verb = 'observations/'.$id.'.json';
  $query = array();
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  dsm($result);
  $json = drupal_json_decode($result->data);
  return theme('inat_observation', array('observation' => $json));
}

function inat_taxa($id, $page) {
  /** Get the project information **/
  $verb = 'taxa/'.$id.'.json';
  $query = array();
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_proj = drupal_json_decode($result->data);

  /** Get observations for the project **/
  if($page == '') {
    $page = 1;
  }
  $verb = 'observations.json';
  $query = array('per_page' => '40', 'order_by' => 'observed_on', 'taxon_id' => $id, 'page' => $page);
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_obs = drupal_json_decode($result->data);
  
  return  theme('inat_taxa', array('taxa' => $json_proj)) . theme('inat_observations_general', array('observations' => $json_obs, 'current_page' => $page, 'base_path' => 'taxa/'.$id));;
}

function inat_taxons() {
  $verb = 'taxa.json';
  $query = array();
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json = drupal_json_decode($result->data);
  
  return theme('inat_taxa_list', array('taxons' => $json));
}
 
function inat_place($id) {
  /** Get the project information **/
  $verb = 'places/'.$id.'.json';
  $query = array();
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_proj = drupal_json_decode($result->data);

  /** Get observations for the project **/
  $verb = 'observations.json';
  $query = array('per_page' => '40', 'order_by' => 'observed_on', 'place_guess' => $id);
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_obs = drupal_json_decode($result->data);
  
  return  theme('inat_place', array('place' => $json_proj)) . theme('inat_observations_general', array('observations' => $json_obs));;
}

function inat_places($page) {
  print_r($page);
  if($page == '') {
    $page = 1;
  }
  $verb = 'places.json';
  $query = array('page' => $page);
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json = drupal_json_decode($result->data);
  
  return theme('inat_place_list', array('places' => $json, 'current_page' => $page));
}
  
function inat_user($id) {
  /** Get the project information **/
  $verb = 'users/'.$id.'.json';
  $query = array();
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_proj = drupal_json_decode($result->data);
  $login = $json_proj['login'];
  /** Get observations for the project **/
  $verb = 'observations/'.$login.'.json';
  $query = array('per_page' => '40', 'order_by' => 'observed_on');
  $options = array('query' => $query, 'https' => FALSE);
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
  $options = array('method' => 'GET');
  $result = drupal_http_request($url, $options);
  $json_obs = drupal_json_decode($result->data);
  
  return  theme('inat_user', array('user' => $json_proj)) . theme('inat_observations_general', array('observations' => $json_obs));;
}

function inat_obs_obs_delete() { 

  $form['inat_obs_delete_sure'] = array(
    '#markup' => '<div id=markup_delete> Are you sure? </div>',
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Delete'),
   );
   $form['#validate'] = array('inat_obs_obs_delete_validate');
   $form['#submit'] = array('inat_obs_obs_delete_submit');
   return system_settings_form($form);
}  

function inat_obs_obs_delete_validate($form, &$form_state) {
}
function inat_obs_obs_delete_submit($form, &$form_state) {
  $observation_id = arg(3);
  $verb = 'observations/'.$observation_id.'.json';
  $data = '';
  $url = url(variable_get('inat_base_url','http://www.inaturalist.org').'/'.$verb.$data, array('https' => 'TRUE'));
  $opt = array('method' => 'DELETE', 'data' => $data, 'headers' => array('Content-Type' => 'multipart/form-data', 'Authorization' => "Bearer ".$_SESSION['inat_access_token']));
  $req = drupal_http_request($url, $opt);
  if ($req->status_message == 'OK') { 
    drupal_set_message(t('iNaturalist observation has been corectly Deleted'), 'status');
  } else {
    drupal_set_message(t('Be carefoul: ') . $req->status_message, 'status');
  }
  drupal_goto('transects');
}

function inat_obs_add_showonmap($id) {
  $transect = node_load($id);
  return array('transect' => $transect->inat_obs_add_map[LANGUAGE_NONE]['0']['geom']);
}
function inat_obs_ajax_callback($id){

  $transect = node_load($id);
  dsm($id);
  print($transect->inat_obs_add_map[LANGUAGE_NONE]['0']['geom']);

}
function inat_obs_obs_update() { 
   $id = arg(3);
   dsm($id);
   $verb = 'observations/'.$id.'.json';
   $query = array();
   $options = array('query' => $query, 'https' => FALSE);
   $url = url(variable_get('inat_base_url','http://www.inaturalist.org') . '/' . $verb, $options);
   $options = array('method' => 'GET');
   $result = drupal_http_request($url, $options);
   dsm($result);
   $json = drupal_json_decode($result->data);
   dsm($json);

   module_load_include('inc', 'node', 'node.pages');
   $node_form = new stdClass;
   $node_form->type = 'inat_observation';
   $node_form->language = LANGUAGE_NONE;
   $form = drupal_get_form("inat_observation_node_form", $node_form);
   unset($form['field_observer_on']);
   unset($form['inat_obs_add_id_please']);
   $form['#validate'] = array('inat_obs_obs_update_validate');
   $form['#submit'] = array('inat_obs_obs_update_submit');
   $form['inat_obs_add_species_guess']['und']['0']['value']['#value'] = $json['species_guess'];
   $form['inat_obs_add_description']['und']['0']['value']['#value'] = $json['description'];
   $form['inat_obs_add_taxon_id ']['und']['0']['value']['#value'] = $json['taxon_id'];
   $form['inat_obs_add_place_guess']['und']['0']['value']['#value'] = $json['place_guess'];
   //preparamos el campo reference del json
   $cadena_de_texto = $json['observation_field_values']['0']['value'];
   $cadena_buscada   = '-';
   $posicion_coincidencia = strpos($cadena_de_texto, $cadena_buscada);
   $reference = substr($cadena_de_texto, $posicion_coincidencia+1);
   // AIXO S'HA DE CAMBIAR PER UNA ENTITY QUERY
   $transect = node_load($reference);
   $form['inat_obs_add_reference']['und']['0']['target_id']['#value'] = $transect->title;
      
   return system_settings_form($form);
}
function inat_obs_obs_update_validate($form, &$form_state) {
}
function inat_obs_obs_update_submit($form, &$form_state) {
  $observation_id = arg(3);
  dsm($form_state);
dsm($form);
  $transect = node_load($form_state['input']['inat_obs_add_reference'][LANGUAGE_NONE]['0']['target_id']); 
  $verb = 'observations/'.$observation_id.'.json';
  $data = '?observation[species_guess]='.$form_state['input']['inat_obs_add_species_guess'][LANGUAGE_NONE]['0']['value'].
      '&observation[taxon_id]='.$form_state['input']['inat_obs_add_taxon_id'][LANGUAGE_NONE]['0']['value'].
      '&observation[time_zone]='.$form_state['input']['field_zona_horaria'][LANGUAGE_NONE].
      '&observation[description]='.$form_state['input']['inat_obs_add_description'][LANGUAGE_NONE]['0']['value'].
      '&observation[place_guess]='.$form_state['input']['inat_obs_add_place_guess'][LANGUAGE_NONE]['0']['value'].
     // '&observation[latitude]='.$form_state['input']['inat_obs_add_map'][LANGUAGE_NONE]['0']['lat'][LANGUAGE_NONE]['0']['value'].
     // '&observation[longitude]='.$form_state['input']['inat_obs_add_map'][LANGUAGE_NONE]['0']['lon'][LANGUAGE_NONE]['0']['value'].
      '&local_photos[0]='.$file->url.
      '&observation[observation_field_values_attributes][0][observation_field_id]='.'2508'.
      '&observation[observation_field_values_attributes][0][value]='.$appid.'-'.$form_state['input']['inat_obs_add_reference'][LANGUAGE_NONE]['0']['target_id'].
      '&observation[observation_field_values_attributes][1][observation_field_id]='.'2509'.
      '&observation[observation_field_values_attributes][1][value]='.$transect->inat_obs_add_map[LANGUAGE_NONE]['0']['geom'];

  $url = url(variable_get('inat_base_url','http://www.inaturalist.org').'/'.$verb.$data, array('https' => 'TRUE'));
  $opt = array('method' => 'PUT', 'data' => $data, 'headers' => array('Content-Type' => 'application/x-www-form-urlencoded', 'Authorization' => "Bearer ".$_SESSION['inat_access_token']));
  $req = drupal_http_request($url, $opt);
  $json = drupal_json_decode($req->data);
  dsm($req);
  if($req->status_message != 'OK') {
    drupal_set_message(t('Unexpected error has been produced, iNaturalist message: ') . $req->status_message, 'error');
  } else {
    drupal_set_message(t('iNaturalist observation has been corectly Updated: ') . $json['id'], 'status');
    drupal_goto('inat/observations');
  }
   
}
function inat_obs_form_inat_observation_node_form_alter(&$form, $form_state) {

  drupal_add_js(drupal_get_path('module','inat_obs') . '/js/showonmap.js', array('scope' => 'footer'));

}
function inat_obs_node_submit($node, $form, &$form_state) {
  
  if($node->type == 'inat_observation') {
    $transect = node_load($form_state['values']['inat_obs_add_reference'][LANGUAGE_NONE]['0']['target_id']); 
    if($node->field_imatges != ''){
      $file = file_load($node->field_imatges[LANGUAGE_NONE]['0']['fid']);   
      $ext_url = file_create_url($file->uri);       
      $lineas = base64_encode(file_get_contents($file->uri)); 
    }
    $appid = variable_get('inat_login_appid', ''); 
    $verb = 'observations.json';
    $data = '?observation[species_guess]='.$form_state['values']['inat_obs_add_species_guess'][LANGUAGE_NONE]['0']['value'].
        '&observation[taxon_id]='.$form_state['values']['inat_obs_add_taxon_id'][LANGUAGE_NONE]['0']['value'].
        '&observation[id_please]='.$form_state['values']['inat_obs_add_id_please'][LANGUAGE_NONE]['0']['value'].
        '&observation[observed_on_string]='.$form_state['values']['field_observer_on'][LANGUAGE_NONE]['0']['value'].
        '&observation[time_zone]='.$form_state['values']['field_zona_horaria'][LANGUAGE_NONE]['0']['value'].
        '&observation[description]='.$form_state['values']['inat_obs_add_description'][LANGUAGE_NONE]['0']['value'].
        '&observation[place_guess]='.$form_state['values']['inat_obs_add_place_guess'][LANGUAGE_NONE]['0']['value'].
        '&observation[latitude]='.$form_state['values']['inat_obs_add_map'][LANGUAGE_NONE]['0']['lat'].
        '&observation[longitude]='.$form_state['values']['inat_obs_add_map'][LANGUAGE_NONE]['0']['lon'].
        '&local_photos[0]='.$file->url.
        '&observation[observation_field_values_attributes][0][observation_field_id]='.'2508'.
        '&observation[observation_field_values_attributes][0][value]='.$appid.'-'.$form_state['values']['inat_obs_add_reference'][LANGUAGE_NONE]['0']['target_id'].
        '&observation[observation_field_values_attributes][1][observation_field_id]='.'2509'.
        '&observation[observation_field_values_attributes][1][value]='.$transect->inat_obs_add_map[LANGUAGE_NONE]['0']['geom'];

    $url = url(variable_get('inat_base_url','http://www.inaturalist.org').'/'.$verb.$data, array('https' => 'TRUE'));
    $opt = array('method' => 'POST', 'data' => $data, 'headers' => array('Content-Type' => 'multipart/form-data ', 'Authorization' => "Bearer ".$_SESSION['inat_access_token']));
    $req = drupal_http_request($url, $opt);
    $jsondecode = get_string_between($req->data,"{","}");
    dsm($req);
    dsm($jsondecode);
    $json = drupal_json_decode($jsondecode);
    dsm($json);
    if($req->status_message != 'OK') {
      drupal_set_message(t('Be carefoul, iNaturalist message: ') . $req->status_message, 'error');
    } else {
      drupal_set_message(t('iNaturalist observation has been corectly created: ') . $json['id'], 'status');
      $projectid = variable_get('inat_base_project','');
      if ($projectid != '') {
        // If the pluguin it's configured with a project limitation, the observation wil be added to the specified project
       $verb = 'project_observations.json';
       $data = '?project_observation[observation_id]='.$json['id'].'&project_observation[project_id]='.$projectid;
       $url = url(variable_get('inat_base_url','http://www.inaturalist.org').'/'.$verb.$data, array('https' => 'TRUE'));
       $opt = array('method' => 'POST', 'data' => $data, 'headers' => array('Content-Type' => 'application/x-www-form-urlencoded', 'Authorization' => "Bearer ".$_SESSION['inat_access_token']));
       $req = drupal_http_request($url, $opt);
       $jsondecode = get_string_between($req->data,"[","]");
       $jsonproject = drupal_json_decode($req->data);
       dsm($jsonproject);
       if($req->status_message == 'OK') {
         drupal_set_message(t('iNaturalist observation has been added to ') . $projectid, 'status');
       }
       else {
         drupal_set_message(t('iNaturalist observation not added to a project: ').$jsonproject['errors']['0'], 'status');
       }
      }
   /* 
      if($node->field_imatges != ''){
        $file = file_load($node->field_imatges[LANGUAGE_NONE]['0']['fid']);   
        $verb = 'observation_photos.json';
        $data = '?local_photos['.$json['id'].'][]='.$ext_url;
        $url = url(variable_get('inat_base_url','http://www.inaturalist.org').'/'.$verb.$data, array('https' => 'TRUE'));
        $opt = array('method' => 'POST', 'data' => $data, 'headers' => array('Content-Type' => 'multipart/form-data', 'Authorization' => "Bearer ".$_SESSION['inat_access_token']));
        $req = drupal_http_request($url, $opt);
        dsm($req);
      } */
    }
   
     
  
  
  }
}
function get_string_between($string, $start, $end){
    $string = " ".$string;
    $ini = strpos($string,$start);
    if ($ini == 0) return "";
    $ini += strlen($start) - 1;
    $len = strpos($string,$end,$ini) - $ini + 1;
    return substr($string,$ini,$len);
}
function inat_obs_node_info() {
  return array(
    'inat_transect' => array(
      'name' => t('Inat Transects'),
      // 'base' tells Drupal the base string for hook functions.
      // This is often the module name; if base is set to 'mymodule',
      // Drupal would call mymodule_insert() or similar for node
      // hooks. In our case, the base is 'node_example'.
      'base' => 'inat_obs',
      'description' => t('Transects provided by plugin'),
      'title_label' => t('Inat Transects'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
    'inat_observation' => array(
      'name' => t('Inat Observation'),
      // 'base' tells Drupal the base string for hook functions.
      // This is often the module name; if base is set to 'mymodule',
      // Drupal would call mymodule_insert() or similar for node
      // hooks. In our case, the base is 'node_example'.
      'base' => 'inat_obs',
      'description' => t('Specific content type to load Inat Observations'),
      'has_title' => TRUE,
      //'title_label' => t('Inat Observations'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

function inat_obs_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

