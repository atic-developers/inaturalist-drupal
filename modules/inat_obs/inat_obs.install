<?php
/**
 * Implements hook_uninstall().
 */

function inat_obs_install() {
 
  node_types_rebuild();
//  $types = node_type_get_types();
//  $content_type = $types['inat_obs'];
    // First we add the body field. Node API helpfully gives us
    // node_add_body_field().
    // We'll set the body label now, although we could also set
    // it along with our other instance properties later.
//   $body_instance = node_add_body_field($content_type, t('Example Description'));

    // Add our example_node_list view mode to the body instance
    // display by instructing the body to display as a summary.
/*
  $body_instance['display']['example_node_list'] = array(
      'label' => 'hidden',
      'type' => 'text_summary_or_trimmed',
    );
*/
    // Save our changes to the body field instance.
//    field_update_instance($body_instance);

    // Create all the fields we are adding to our content type.
    foreach (_inat_obs_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_inat_obs_installed_observation_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'inat_observation';
      print_r($instance);
      field_create_instance($instance);
    }
    
    foreach (_inat_obs_installed_transect_instances() as $instance2) {
      $instance2['entity_type'] = 'node';
      $instance2['bundle'] = 'inat_transect';
      field_create_instance($instance2);
    }

}

function _inat_obs_installed_fields() {
  return array(
    'inat_obs_add_species_guess' => array(
      'field_name' => 'inat_obs_add_species_guess',
      'cardinality' => 3,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 60,
      ),
    ),
    'inat_obs_add_taxon_id' => array(
      'field_name'  => 'inat_obs_add_taxon_id',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'inat_obs_add_id_please' => array(
      'field_name' => 'inat_obs_add_id_please',
      'type'       => 'list_text',
      'cardinality' => 1,
      'settings' => array(
                      'allowed_values' => array(0 => t('No'), 1 => t('Yes')),
                    ),
      ),
    'field_observer_on' => array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_observer_on',
      'foreign keys' => array(),
      'indexes' => array(),
      'locked' => 0,
      'module' => 'date',
      'settings' => array(
        'cache_count' => 4,
        'cache_enabled' => 0,
        'granularity' => array(
          'day' => 'day',
          'hour' => 0,
          'minute' => 0,
          'month' => 'month',
          'second' => 0,
          'year' => 'year',
        ),
        'timezone_db' => '',
        'todate' => '',
        'tz_handling' => 'none',
      ),
      'translatable' => 0,
      'type' => 'datetime',
    ), 
    'field_zona_horaria' => array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_zona_horaria',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'locked' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          '0 ' => ' Abu Dhabi',
          '1 ' => ' Adelaide',
          '2 ' => ' Africa/Johannesburg',
          '3 ' => ' Alaska',
          '4 ' => ' Almaty',
          '5 ' => ' American Samoa',
          '6 ' => ' Mid-Atlantic',
          '7 ' => ' Arizona',
          '8 ' => 'Asia/Magadan',
          '9 ' => ' Astana',
          '10 ' => ' Athens',
          '11 ' => ' Atlantic Time (Canada)',
          '12 ' => 'Atlantic/Cape_Verde',
          '13 ' => 'Auckland',
          '14 ' => 'Australia/Perth',
          '15 ' => 'Azores',
          '16 ' => 'Baghdad',
          '17 ' => 'Baku',
          '18 ' => 'Bangkok',
          '19 ' => 'Beijing',
          '20 ' => 'Belgrade',
          '21 ' => 'Berlin', 
          '22 ' => ' Bern',
          '23 ' => ' Bogota',
          '24 ' => ' Brasilia',
          '25 ' => ' Bratislava',
          '26 ' => ' Brisbane',
          '27 ' => ' Brussels',
          '28 ' => ' Bucharest',
          '29 ' => ' Budapest',
          '30 ' => ' Buenos Aires',
          '31 ' => ' Cairo',
          '32 ' => ' Canberra',
          '33 ' => ' Cape Verde Is.',
          '34 ' => ' Caracas',
          '35 ' => ' Casablanca',
          '36 ' => ' Central America',
          '37 ' => ' Central Time (US & Canada)',
          '38 ' => ' Chennai',
          '39 ' => ' Chihuahua',
          '40 ' => ' Chongqing',
          '41 ' => ' Copenhagen',
          '42 ' => ' Darwin',
          '43 ' => ' Dhaka',
          '44 ' => ' Dublin',
          '45 ' => ' Eastern Time (US & Canada)',
          '46 ' => ' Edinburgh',
          '47 ' => ' Ekaterinburg',
          '48 ' => ' Europe/London',
          '49 ' => ' Fiji',
          '50 ' => ' Georgetown',
          '51 ' => ' Greenland',
          '52 ' => ' Guadalajara',
          '53 ' => ' Guam',
          '54 ' => ' Hanoi',
          '55 ' => ' Harare',
          '56 ' => ' Hawaii',
          '57 ' => ' Helsinki',
          '58 ' => ' Hobart',
          '59 ' => ' Hong Kong',  
          '60 ' => ' Indiana (East)',
          '61 ' => ' International Date Line West',
          '62 ' => ' Irkutsk',
          '63 ' => ' Islamabad',
          '64 ' => ' Istanbul',
          '65 ' => ' Jerusalem',
          '66 ' => ' Kabul',
          '67 ' => ' Kamchatka',
          '68 ' => ' Karachi',
          '69 ' => ' Kathmandu',
          '70 ' => ' Kolkata',
          '71 ' => ' Krasnoyarsk',
          '72 ' => ' Kuala Lumpur',
          '73 ' => ' Kuwait',
          '74 ' => ' Kyiv',
          '75 ' => ' La Paz',
          '76 ' => ' Lima',
          '77 ' => ' Lisbon',
          '78 ' => ' Ljubljana',
          '79 ' => ' London',
          '80 ' => ' Madrid',
          '81 ' => ' Magadan',
          '82 ' => ' Marshall Is.',
          '83 ' => ' Mazatlan',
          '84 ' => ' Melbourne',
          '85 ' => ' Mexico City',
          '87 ' => ' Midway Island',
          '88 ' => ' Minsk',
          '89 ' => ' Monrovia',
          '90 ' => ' Monterrey',
          '91 ' => ' Moscow',
          '92 ' => ' Mountain Time (US & Canada)',
          '93 ' => ' Mumbai',
          '94 ' => ' Muscat',
          '95 ' => ' Nairobi',
          '96 ' => ' New Caledonia',
          '97 ' => ' New Delhi',
          '98 ' => ' Newfoundland',
          '99 ' => ' Novosibirsk',
          '100 ' => ' Nukualofa',                                                                                                                  
          '101 ' => ' Osaka',
          '102 ' => ' Pacific Time (US & Canada)',
          '103 ' => ' Pacific/Majuro',
          '104 ' => ' Pacific/Port_Moresby',
          '105 ' => ' Paris',
          '106 ' => ' Perth',
          '107 ' => ' Port Moresby',
          '108 ' => ' Prague',
          '109 ' => ' Pretoria',
          '110 ' => ' Quito',
          '111 ' => ' Rangoon',
          '112 ' => ' Riga',
          '113 ' => ' Riyadh',
          '114 ' => ' Rome',
          '115 ' => ' Samoa',
          '116 ' => ' Santiago',
          '117 ' => ' Sapporo',
          '118 ' => ' Sarajevo',
          '119 ' => ' Saskatchewan',
          '120 ' => ' Seoul',
          '121 ' => ' Singapore',
          '122 ' => ' Skopje',
          '123 ' => ' Sofia',
          '124 ' => ' Solomon Is.',
          '125 ' => ' Sri Jayawardenepura',
          '126 ' => ' St. Petersburg',
          '127 ' => ' Stockholm',
          '128 ' => ' Sydney',
          '129 ' => ' Taipei',
          '130 ' => ' Tallinn',
          '131 ' => ' Tashkent',
          '132 ' => ' Tbilisi',
          '133 ' => ' Tehran',
          '134 ' => ' Tijuana',
          '135 ' => ' Tokelau Is.',
          '136 ' => ' Tokyo',
          '137 ' => ' UTC',
          '138 ' => ' Ulaan Bataar',
          '139 ' => ' Urumqi',
          '140 ' => ' Vienna',
          '141 ' => ' Vilnius',
          '142 ' => ' Vladivostok',
          '143 ' => ' Volgograd',
          '144 ' => ' Warsaw',
          '145 ' => ' West Central Africa',
          '146 ' => ' Yakutsk',
          '147 ' => ' Yerevan',
          '148 ' => ' Zagreb',
          ),
        'allowed_values_function' => '',
      ),
      'translatable' => 0,
      'type' => 'list_text',
    ),
 
   'inat_obs_add_field_imatges' => array(
        'active' => 1,
        'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_imatges',
      'foreign keys' => array(
        'fid' => array(
          'columns' => array(
            'fid' => 'fid',
          ),
          'table' => 'file_managed',
        ),
      ),
      'indexes' => array(
        'fid' => array(
          0 => 'fid',
       ),
      ),
      'locked' => 0,
      'module' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
      'translatable' => 0,
      'type' => 'image',
    ),
    'inat_obs_add_place_guess' => array(
      'field_name'  => 'inat_obs_add_place_guess',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'inat_obs_add_map' => array(
      'field_name'  => 'inat_obs_add_map',
      'cardinality' => 1,
      'type'        => 'geofield',
    ),
    'inat_obs_add_description' => array(
      'field_name'  => 'inat_obs_add_description',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),
    'inat_obs_add_latitude' => array(
      'field_name'  => 'inat_obs_add_latitude',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'inat_obs_add_longitude' => array(
      'field_name'  => 'inat_obs_add_longitude',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'inat_obs_add_reference' => array(
      'field_name'  => 'inat_obs_add_reference',
      'type'        => 'entityreference', 
      'settings'    => array(
        'target_type' => 'node',
        'handler' => 'base',
        'handler_settings' => array(
          'target_bundles' => array('inat_transects')
       ),
     ),
   ),
  );
 
}


/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */

function _inat_obs_installed_observation_instances() {
  return array(
    'inat_obs_add_taxon_id' => array(
      'field_name'  => 'inat_obs_add_taxon_id',
      'label' => t('Taxon'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'custom' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'inat_obs_add_description' => array(
      'field_name'  => 'inat_obs_add_description',
      'label'       => t('Description'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'text_area',
      ),
      'display' => array(
        'custom' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'inat_obs_add_place_guess' => array(
      'field_name'  => 'inat_obs_add_place_guess',
      'label'       => t('Place'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'custom' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
   'inat_obs_reference' => array(
      'field_name'  => 'inat_obs_add_reference',
      'label'       => t('Transect'),
      'required'    => FALSE,
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => 'inat_transect'), 
      ),
      'widget' => array(),
      'display' => array(
        'custom' => array(
          'label' => 'hidden',
        ),
      ),
    ),
);
}                           
function _inat_obs_installed_transect_instances(){

  return array(
    'inat_obs_add_description' => array(
      'field_name'  => 'inat_obs_add_description',
      'label'       => t('Description'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'text_area',
      ),
      'display' => array(
        'custom' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ), 
    'inat_obs_add_map' => array(
      'field_name'  => 'inat_obs_add_map',
      'label'       => t('Points'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'leaflet_widget_widget',
      ),
      'display' => array(
        'custom' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
  );

}

function inat_obs_uninstall() {
    $ournewtype = 'inat_observation';
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => $ournewtype));
    $nodeids = array();
    foreach ($result as $row) {
        $nodeids[] = $row->nid;
    }
    node_delete_multiple($nodeids);
    delete_custom_fields();
    node_type_delete($ournewtype);
    field_purge_batch(500);
}
 

function delete_custom_fields() {
    foreach (array_keys(_inat_obs_installed_fields()) as $field) {
        field_delete_field($field);
    }
    $instances = field_info_instances('node', 'inat_observation');
    foreach ($instances as $instance_name => $fieldinstance) {
        field_delete_instance($fieldinstance);
    }
}

?>
